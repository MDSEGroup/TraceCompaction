/**
 */
package trace.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import trace.util.TraceAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class TraceItemProviderAdapterFactory extends TraceAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public TraceItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link trace.Trace} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TraceItemProvider traceItemProvider;

	/**
	 * This creates an adapter for a {@link trace.Trace}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTraceAdapter() {
		if (traceItemProvider == null) {
			traceItemProvider = new TraceItemProvider(this);
		}

		return traceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link trace.RefValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RefValueItemProvider refValueItemProvider;

	/**
	 * This creates an adapter for a {@link trace.RefValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRefValueAdapter() {
		if (refValueItemProvider == null) {
			refValueItemProvider = new RefValueItemProvider(this);
		}

		return refValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link trace.State} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StateItemProvider stateItemProvider;

	/**
	 * This creates an adapter for a {@link trace.State}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStateAdapter() {
		if (stateItemProvider == null) {
			stateItemProvider = new StateItemProvider(this);
		}

		return stateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link trace.NormalStep} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NormalStepItemProvider normalStepItemProvider;

	/**
	 * This creates an adapter for a {@link trace.NormalStep}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNormalStepAdapter() {
		if (normalStepItemProvider == null) {
			normalStepItemProvider = new NormalStepItemProvider(this);
		}

		return normalStepItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link trace.StepType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StepTypeItemProvider stepTypeItemProvider;

	/**
	 * This creates an adapter for a {@link trace.StepType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStepTypeAdapter() {
		if (stepTypeItemProvider == null) {
			stepTypeItemProvider = new StepTypeItemProvider(this);
		}

		return stepTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link trace.PatternOcurrence} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PatternOcurrenceItemProvider patternOcurrenceItemProvider;

	/**
	 * This creates an adapter for a {@link trace.PatternOcurrence}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPatternOcurrenceAdapter() {
		if (patternOcurrenceItemProvider == null) {
			patternOcurrenceItemProvider = new PatternOcurrenceItemProvider(this);
		}

		return patternOcurrenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link trace.StepPattern} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StepPatternItemProvider stepPatternItemProvider;

	/**
	 * This creates an adapter for a {@link trace.StepPattern}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStepPatternAdapter() {
		if (stepPatternItemProvider == null) {
			stepPatternItemProvider = new StepPatternItemProvider(this);
		}

		return stepPatternItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link trace.PatternOccurrenceStepData} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PatternOccurrenceStepDataItemProvider patternOccurrenceStepDataItemProvider;

	/**
	 * This creates an adapter for a {@link trace.PatternOccurrenceStepData}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPatternOccurrenceStepDataAdapter() {
		if (patternOccurrenceStepDataItemProvider == null) {
			patternOccurrenceStepDataItemProvider = new PatternOccurrenceStepDataItemProvider(this);
		}

		return patternOccurrenceStepDataItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link trace.LiteralString} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LiteralStringItemProvider literalStringItemProvider;

	/**
	 * This creates an adapter for a {@link trace.LiteralString}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLiteralStringAdapter() {
		if (literalStringItemProvider == null) {
			literalStringItemProvider = new LiteralStringItemProvider(this);
		}

		return literalStringItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link trace.LiteralBoolean} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LiteralBooleanItemProvider literalBooleanItemProvider;

	/**
	 * This creates an adapter for a {@link trace.LiteralBoolean}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLiteralBooleanAdapter() {
		if (literalBooleanItemProvider == null) {
			literalBooleanItemProvider = new LiteralBooleanItemProvider(this);
		}

		return literalBooleanItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link trace.LiteralInteger} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LiteralIntegerItemProvider literalIntegerItemProvider;

	/**
	 * This creates an adapter for a {@link trace.LiteralInteger}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLiteralIntegerAdapter() {
		if (literalIntegerItemProvider == null) {
			literalIntegerItemProvider = new LiteralIntegerItemProvider(this);
		}

		return literalIntegerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link trace.LiteralFloat} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LiteralFloatItemProvider literalFloatItemProvider;

	/**
	 * This creates an adapter for a {@link trace.LiteralFloat}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLiteralFloatAdapter() {
		if (literalFloatItemProvider == null) {
			literalFloatItemProvider = new LiteralFloatItemProvider(this);
		}

		return literalFloatItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link trace.RepeatingStep} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RepeatingStepItemProvider repeatingStepItemProvider;

	/**
	 * This creates an adapter for a {@link trace.RepeatingStep}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRepeatingStepAdapter() {
		if (repeatingStepItemProvider == null) {
			repeatingStepItemProvider = new RepeatingStepItemProvider(this);
		}

		return repeatingStepItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link trace.ParameterValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParameterValueItemProvider parameterValueItemProvider;

	/**
	 * This creates an adapter for a {@link trace.ParameterValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParameterValueAdapter() {
		if (parameterValueItemProvider == null) {
			parameterValueItemProvider = new ParameterValueItemProvider(this);
		}

		return parameterValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link trace.TransientObjectState} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TransientObjectStateItemProvider transientObjectStateItemProvider;

	/**
	 * This creates an adapter for a {@link trace.TransientObjectState}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTransientObjectStateAdapter() {
		if (transientObjectStateItemProvider == null) {
			transientObjectStateItemProvider = new TransientObjectStateItemProvider(this);
		}

		return transientObjectStateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link trace.LeafObjectState} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LeafObjectStateItemProvider leafObjectStateItemProvider;

	/**
	 * This creates an adapter for a {@link trace.LeafObjectState}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLeafObjectStateAdapter() {
		if (leafObjectStateItemProvider == null) {
			leafObjectStateItemProvider = new LeafObjectStateItemProvider(this);
		}

		return leafObjectStateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link trace.CompositeObjectState} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CompositeObjectStateItemProvider compositeObjectStateItemProvider;

	/**
	 * This creates an adapter for a {@link trace.CompositeObjectState}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCompositeObjectStateAdapter() {
		if (compositeObjectStateItemProvider == null) {
			compositeObjectStateItemProvider = new CompositeObjectStateItemProvider(this);
		}

		return compositeObjectStateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link trace.StaticTransientObject} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StaticTransientObjectItemProvider staticTransientObjectItemProvider;

	/**
	 * This creates an adapter for a {@link trace.StaticTransientObject}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStaticTransientObjectAdapter() {
		if (staticTransientObjectItemProvider == null) {
			staticTransientObjectItemProvider = new StaticTransientObjectItemProvider(this);
		}

		return staticTransientObjectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link trace.DynamicTransientObject} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DynamicTransientObjectItemProvider dynamicTransientObjectItemProvider;

	/**
	 * This creates an adapter for a {@link trace.DynamicTransientObject}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDynamicTransientObjectAdapter() {
		if (dynamicTransientObjectItemProvider == null) {
			dynamicTransientObjectItemProvider = new DynamicTransientObjectItemProvider(this);
		}

		return dynamicTransientObjectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link trace.CompositParameterList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CompositParameterListItemProvider compositParameterListItemProvider;

	/**
	 * This creates an adapter for a {@link trace.CompositParameterList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCompositParameterListAdapter() {
		if (compositParameterListItemProvider == null) {
			compositParameterListItemProvider = new CompositParameterListItemProvider(this);
		}

		return compositParameterListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link trace.LeafParameterList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LeafParameterListItemProvider leafParameterListItemProvider;

	/**
	 * This creates an adapter for a {@link trace.LeafParameterList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLeafParameterListAdapter() {
		if (leafParameterListItemProvider == null) {
			leafParameterListItemProvider = new LeafParameterListItemProvider(this);
		}

		return leafParameterListItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (traceItemProvider != null) traceItemProvider.dispose();
		if (refValueItemProvider != null) refValueItemProvider.dispose();
		if (stateItemProvider != null) stateItemProvider.dispose();
		if (normalStepItemProvider != null) normalStepItemProvider.dispose();
		if (stepTypeItemProvider != null) stepTypeItemProvider.dispose();
		if (patternOcurrenceItemProvider != null) patternOcurrenceItemProvider.dispose();
		if (stepPatternItemProvider != null) stepPatternItemProvider.dispose();
		if (patternOccurrenceStepDataItemProvider != null) patternOccurrenceStepDataItemProvider.dispose();
		if (literalStringItemProvider != null) literalStringItemProvider.dispose();
		if (literalBooleanItemProvider != null) literalBooleanItemProvider.dispose();
		if (literalIntegerItemProvider != null) literalIntegerItemProvider.dispose();
		if (literalFloatItemProvider != null) literalFloatItemProvider.dispose();
		if (repeatingStepItemProvider != null) repeatingStepItemProvider.dispose();
		if (parameterValueItemProvider != null) parameterValueItemProvider.dispose();
		if (transientObjectStateItemProvider != null) transientObjectStateItemProvider.dispose();
		if (leafObjectStateItemProvider != null) leafObjectStateItemProvider.dispose();
		if (compositeObjectStateItemProvider != null) compositeObjectStateItemProvider.dispose();
		if (staticTransientObjectItemProvider != null) staticTransientObjectItemProvider.dispose();
		if (dynamicTransientObjectItemProvider != null) dynamicTransientObjectItemProvider.dispose();
		if (compositParameterListItemProvider != null) compositParameterListItemProvider.dispose();
		if (leafParameterListItemProvider != null) leafParameterListItemProvider.dispose();
	}

}
